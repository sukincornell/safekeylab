apiVersion: v1
kind: Service
metadata:
  name: aegis-api
  namespace: aegis-production
  labels:
    app: aegis-api
    tier: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
spec:
  type: LoadBalancer
  selector:
    app: aegis-api
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours
  ports:
  - port: 443
    targetPort: 8443
    protocol: TCP
    name: https
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http

---
# Internal service for pod-to-pod communication
apiVersion: v1
kind: Service
metadata:
  name: aegis-api-internal
  namespace: aegis-production
  labels:
    app: aegis-api
spec:
  type: ClusterIP
  clusterIP: None  # Headless service
  selector:
    app: aegis-api
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http-internal
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics

---
# Ingress for multi-region routing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aegis-api-ingress
  namespace: aegis-production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/limit-rps: "1000"
    nginx.ingress.kubernetes.io/limit-connections: "100"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-API-Key"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://aegis-shield.ai"
spec:
  tls:
  - hosts:
    - api.aegis-shield.ai
    - api-us.aegis-shield.ai
    - api-eu.aegis-shield.ai
    - api-ap.aegis-shield.ai
    secretName: aegis-tls
  rules:
  - host: api.aegis-shield.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aegis-api
            port:
              number: 443
  - host: api-us.aegis-shield.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aegis-api
            port:
              number: 443
  - host: api-eu.aegis-shield.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aegis-api
            port:
              number: 443

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: aegis-api-network-policy
  namespace: aegis-production
spec:
  podSelector:
    matchLabels:
      app: aegis-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: aegis-production
    - namespaceSelector:
        matchLabels:
          name: aegis-monitoring
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8443
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: aegis-production
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  - to:
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 169.254.169.254/32  # Block metadata service
    ports:
    - protocol: TCP
      port: 443  # HTTPS for external services