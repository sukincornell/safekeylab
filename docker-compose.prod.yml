version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aegis-postgres
    restart: always
    environment:
      POSTGRES_USER: aegis
      POSTGRES_PASSWORD: ${DB_PASSWORD:-oKV7BL16XiarmQMky7IpihZsdJ}
      POSTGRES_DB: aegis_production
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.utf8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - aegis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aegis -d aegis_production"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aegis-redis
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-9gcCEn43v8Z9pMtHMedmiXkVxh2N9y}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - aegis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=3.11
    image: aegis-api:latest
    container_name: aegis-app
    restart: always
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://aegis:${DB_PASSWORD:-oKV7BL16XiarmQMky7IpihZsdJ}@postgres:5432/aegis_production
      - REDIS_URL=redis://:${REDIS_PASSWORD:-9gcCEn43v8Z9pMtHMedmiXkVxh2N9y}@redis:6379/0
      - WORKERS=${WORKERS:-4}
    volumes:
      - ./app:/app
      - model_cache:/var/cache/aegis/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aegis-network
    command: >
      gunicorn app.main:app
      --workers ${WORKERS:-4}
      --worker-class uvicorn.workers.UvicornWorker
      --bind 0.0.0.0:8000
      --access-logfile -
      --error-logfile -
      --max-requests 1000
      --max-requests-jitter 50
      --timeout 60
      --keepalive 5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: aegis-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - aegis-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: aegis-prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - aegis-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: aegis-grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-GrafanaAdmin2024!}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      - prometheus
    networks:
      - aegis-network

  # Database Backup (runs daily)
  backup:
    image: postgres:15-alpine
    container_name: aegis-backup
    restart: always
    environment:
      PGPASSWORD: ${DB_PASSWORD:-oKV7BL16XiarmQMky7IpihZsdJ}
    volumes:
      - ./backups:/backups
    entrypoint: |
      sh -c 'while true; do
        pg_dump -h postgres -U aegis aegis_production | gzip > /backups/aegis_$$(date +%Y%m%d_%H%M%S).sql.gz
        find /backups -name "aegis_*.sql.gz" -mtime +30 -delete
        sleep 86400
      done'
    depends_on:
      - postgres
    networks:
      - aegis-network

networks:
  aegis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  model_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local